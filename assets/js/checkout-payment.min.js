const cart=JSON.parse(localStorage.getItem("cart"))||new Object,customer=JSON.parse(localStorage.getItem("customer"))||new Object;let discountValue=Number(customer.discountValue)||0,discountCode=customer.discountCode||"";const totalPrice=Object.keys(cart).reduce((acc,id)=>{const{quantity:quantity,price:price}=cart[id];return acc+price*quantity},0);let discountValueMath;discountValueMath=discountValue<0?Math.abs(discountValue):Math.abs(discountValue)/100*totalPrice,discountValueMath=Math.round(discountValueMath),customer.deliveryPrice||(customer.deliveryPrice=0);let formSend=function(){};!function(){const cartDOMElement=document.querySelector(".js-cart");if(!cartDOMElement)return;const cartSubtotalPriceDOMElement=document.querySelector(".js-cart-subtotal-price"),cartTotalPriceDOMElement=document.querySelector(".js-cart-total-price"),cartDiscountCodeDOMElement=document.querySelector(".activated-discount"),cartDiscountSumDOMElement=document.querySelector(".js-discount-sum"),cartDeliverySumDOMElement=document.querySelector(".js-delivery-sum"),hiddenFormEmptyCart=document.querySelector(".hidden-form-empty-cart"),hiddenEmptyDiscountCode=document.querySelector(".mb-25"),hiddenEmptyDiscountCodeDiv=document.querySelector(".discount-code-div"),renderCartItem=({id:id,name:name,src:src,price:price,quantity:quantity,weight:weight,weightOz:weightOz})=>{const cartItemDOMElement=document.createElement("div"),summitem=price*quantity,cartItemTemplate=`\n      <div class="cart-product uppercase flex items-start">\n        <div class="cart-product__visual overflow-hidden flex-shrink-0">\n          <picture>\n          <img class="w-full max-w-full transition-opacity duration-300 entered loaded" data-component="lazyload" data-animate="data-animate" src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 9'%3E%3C/svg%3E" data-srcset="${src}" alt="image description" data-ll-status="loaded" srcset="${src}">\n          </picture>\n        </div>\n        <div class="flex-grow">\n          <h4 class="cart-product__title laptop:w-8/12">${name}</h4>\n          <div class="cart-product__info-line flex justify-between items-baseline">\n            <div class="cart-product__info-item">\n              <span class="font-moonglade">$ ${price}</span><span class="opacity-50 weight lowercase font-moonglade">(${weight}g / ${weightOz}oz)</span>\n            </div>\n            <div class="cart-product__info-item"><span class="js-cart-item-price">$ ${summitem}</span></div>\n          </div>\n          <div class="flex justify-between items-center">\n            <div class="cart-product__info-item">\n              <div class="stepper" data-component="stepper" data-min="1" data-max="99" data-step="1">\n              <div class="stepper__control stepper__control--decrease" data-decrement=""><i class="js-btn-product-decrease-quantity"></i></div>\n              <input class="stepper__input js-cart-item-quantity" readonly type="number" data-input="" value="${quantity}" />\n              <div class="stepper__control stepper__control--increase" data-increment=""><i class="js-btn-product-increase-quantity"></i></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;cartItemDOMElement.innerHTML=cartItemTemplate,cartItemDOMElement.setAttribute("data-product-id",id),cartItemDOMElement.classList.add("js-cart-item"),cartDOMElement.appendChild(cartItemDOMElement)},updateCartTotalPrice=()=>{cartEmpty()||(cartSubtotalPriceDOMElement&&(cartSubtotalPriceDOMElement.textContent="$ "+totalPrice),cartDiscountSumDOMElement&&(cartDiscountSumDOMElement.textContent=discountValueMath?"$ -"+discountValueMath:"$ 0"),customer.deliveryPrice&&Object.keys(cart).length&&(cartDeliverySumDOMElement.textContent="$ "+customer.deliveryPrice),cartTotalPriceDOMElement&&(cartTotalPriceDOMElement.textContent="$ "+(Number(totalPrice)-discountValueMath+Number(customer.deliveryPrice))))},updateDiscountField=()=>{discountCode?cartDiscountCodeDOMElement.innerText=discountCode:(hiddenEmptyDiscountCode.style.display="none",hiddenEmptyDiscountCodeDiv.style.display="none")},updateCart=()=>{updateDiscountField(),updateCartTotalPrice(),itemWrapFull=document.getElementById("js-cart-wrapper-full"),itemWrapEmpty=document.getElementById("js-cart-wrapper-empty")},renderCart=()=>{if(cartEmpty())return;const ids=Object.keys(cart);ids.forEach(id=>renderCartItem(cart[id]))},renderForm=()=>{if(customer){const customerForm=document.forms.customerinfo;customer.email?customerForm.customerShippingEmail.value=customer.email:customerForm.customerShippingEmail.value="",customer.shippingAddress?customerForm.customerShippingAddress.value=customer.shippingAddress:customerForm.customerShippingAddress.value="",customer.deliveryMethodText?customerForm.customerShippingMethod.value=customer.deliveryMethodText:customerForm.customerShippingMethod.value=""}},onlyPurchasedGoods=()=>{const ids=Object.keys(cart);let xmlPurchasedGoods="";return ids.forEach(id=>xmlPurchasedGoods+=cart[id].id.replace("product_","")+"="+Number(cart[id].quantity)+"&"),xmlPurchasedGoods},customerinfoToSend=()=>{let xmlCustomerinfoToSend="";for(let key in customer)customer.hasOwnProperty(key)&&(xmlCustomerinfoToSend+=`${key}=${customer[key]}&`);return xmlCustomerinfoToSend},cartEmpty=function(){return!Object.keys(cart).length};formSend=function(){if(cartEmpty())return;var xhr=new XMLHttpRequest,url=WPJS.ajaxUrl+"?action=send_email";xhr.open("POST",url,!0),xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),xhr.onload=function(){const response=xhr.response.trim();"success"==response?("false"==localStorage.getItem("rememberMeCheckbox")?localStorage.removeItem("customer"):console.log(localStorage.getItem("rememberMeCheckbox")),localStorage.removeItem("cart"),$("body").addClass("noscroll"),$(".modal-shadow").fadeIn(),$(".modal-shadow").addClass("active"),$(".modal-success").addClass("active")):showMessage("When you send an error has occurred. Please contact site support!")};let infoToSend=onlyPurchasedGoods();infoToSend+=customerinfoToSend(),xhr.send(infoToSend)};const cartIsEmptyPlug=function(){emptyCartDOMelement=document.querySelector(".js-cart-is-empty-plug");const cartEmptyPlug='\n    <p class="uppercase opacity-50 text-center w-full cart-popup__empty-message">\n      <br><br><br><br><br>\n      It appears that your cart <br>\n      is currently empty!\n      <br><br><br><br><br>  \n    </p>\n    ';emptyCartDOMelement.innerHTML=cartEmptyPlug},cartInit=()=>{if(cartEmpty())return cartIsEmptyPlug(),void(hiddenFormEmptyCart.hidden=!0);renderForm(),renderCart(),updateCart()};cartInit()}();const checkValidityOurFunc=customerForm=>{if(customerForm.customerShippingEmail.checkValidity())if(customerForm.customerShippingAddress.checkValidity())if(customerForm.customerCardNumber.checkValidity())if(customerForm.customerNameOnCard.checkValidity())if(customerForm.customerCardExpiration.checkValidity()){if(customerForm.customerCardSecurityCode.checkValidity())return!0;alert("Please check your Card Security Code spelling")}else alert("Please check your Card Expiration spelling");else alert("Please check your Name On Card spelling");else alert("Please check your Card Number spelling");else alert("Please check your Shipping Address spelling");else alert("Please check your Email spelling")},stripe=Stripe(WPJS.pubKey);let elements;async function initialize(){const merged={cart:cart,customer:customer},bodyText=JSON.stringify({merged:merged}),{clientSecret:clientSecret}=await fetch("https://moonglade.world/create-payment",{method:"POST",headers:{"Content-Type":"application/json"},body:bodyText}).then(r=>r.json()),appearance={theme:"night",variables:{spacingUnit:6.7,colorBackground:"#000000",colorPrimary:"#0d0d0d",colorDanger:"#b4b4b4",colorIconCardCvcError:"#b4b4b4"},rules:{".Tab--selected":{borderColor:"#0d0d0d"}}};elements=stripe.elements({clientSecret:clientSecret,appearance:appearance});const paymentElement=elements.create("payment");paymentElement.mount("#payment-element")}async function handleSubmit(e){const rememberMeCheckbox=document.querySelector(".remember-me-checkbox");localStorage.setItem("rememberMeCheckbox",rememberMeCheckbox.checked),e.preventDefault(),setLoading(!0),stripe.confirmPayment({elements:elements,confirmParams:{return_url:"https://moonglade.world/order-complete/"},redirect:"if_required"}).then((function(result){result.error?(console.log("error"),"card_error"===result.error.type||"validation_error"===result.error.type?showMessage(result.error.message):showMessage("An unexpected error occurred."),setLoading(!1)):"succeeded"==result.paymentIntent.status&&(console.log("paymentIntent"),formSend())}))}async function checkStatus(){const clientSecret=new URLSearchParams(window.location.search).get("payment_intent_client_secret");if(!clientSecret)return;const{paymentIntent:paymentIntent}=await stripe.retrievePaymentIntent(clientSecret);switch(paymentIntent.status){case"succeeded":showMessage("Payment succeeded!");break;case"processing":showMessage("Your payment is processing.");break;case"requires_payment_method":showMessage("Your payment was not successful, please try again.");break;default:showMessage("Something went wrong.")}}function showMessage(messageText){const messageContainer=document.querySelector("#payment-message");messageContainer.classList.remove("hidden"),messageContainer.textContent=messageText,setTimeout((function(){messageContainer.classList.add("hidden"),messageText.textContent=""}),4e3)}function setLoading(isLoading){isLoading?(document.querySelector("#submit").disabled=!0,document.querySelector("#spinner").classList.remove("hidden"),document.querySelector("#button-text").classList.add("hidden")):(document.querySelector("#submit").disabled=!1,document.querySelector("#spinner").classList.add("hidden"),document.querySelector("#button-text").classList.remove("hidden"))}initialize(),checkStatus(),document.querySelector("#payment-form").addEventListener("submit",handleSubmit);const paypalitems=()=>{let itemsPayPal=[];const ids=Object.keys(cart);return ids.forEach(id=>{let data=new Object;data.name=cart[id].name,data.unit_amount={currency_code:"USD",value:cart[id].price},data.quantity=cart[id].quantity,itemsPayPal.push(data)}),itemsPayPal};console.log(JSON.stringify(paypalitems())),console.log(totalPrice,Number(customer.deliveryPrice),discountValueMath,totalPrice+Number(customer.deliveryPrice)-discountValueMath+0),paypal.Buttons({style:{layout:"horizontal",color:"black",shape:"rect",label:"paypal",tagline:!1,height:55},createOrder:(data,actions)=>actions.order.create({purchase_units:[{amount:{currency_code:"USD",value:totalPrice+Number(customer.deliveryPrice)-discountValueMath,breakdown:{discount:{currency_code:"USD",value:discountValueMath},shipping:{currency_code:"USD",value:Number(customer.deliveryPrice)},item_total:{currency_code:"USD",value:totalPrice}}},items:paypalitems()}]}),onApprove:(data,actions)=>actions.order.capture().then((function(orderData){formSend()}))}).render("#paypal-button-container");